upstream flask_app {
    server web:5000;
}

server {
    listen 443 ssl;
    server_name localhost;

    ssl_certificate     /etc/nginx/ca_secrets/ca_cert.pem;
    ssl_certificate_key /etc/nginx/ca_secrets/ca_key.pem;

    # License client SSL certificates
    ssl_client_certificate /etc/nginx/ca_secrets/ca_cert.pem;
    ssl_verify_depth 2;

    # We make client certificates optional
    ssl_verify_client optional;

    # Standard door
    location / {
        proxy_pass http://flask_app;

        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;


        proxy_set_header X-Client-Verify $ssl_client_verify;

        proxy_set_header X-Client-DN $ssl_client_s_dn;
    }

    # VIP door
    location /cert_login {
        # check if the certificate is a "SUCCESS"
        if ($ssl_client_verify != "SUCCESS") {
            return 403; # Forbidden
        }

        # If good, forward to the Flask route
        proxy_pass http://flask_app/cert_login_handler;

        # Forward the certificate information to Flask
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # Forward the DN information
        proxy_set_header X-Client-DN $ssl_client_s_dn;
    }
}